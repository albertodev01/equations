import 'dart:math' as math;

import 'package:equations/equations.dart';

/// An abstract class that represents a nonlinear equation, which can be solved
/// with a particular root-finding algorithm. No complex numbers are allowed.
///
/// The so called "**root-finding algorithms**" are iterative methods that start
/// from an initial value (or a couple of values) and try to build a scalar
/// succession that converges as much as possible to the root. The algorithms
/// implemented by this package are:
///
///   - [Bisection]
///   - [Brent]
///   - [Chords]
///   - [Newton]
///   - [RegulaFalsi]
///   - [Riddler]
///   - [Secant]
///   - [Steffensen]
///
/// Each subclass of [NonLinear] has to override the [solve] method to build the
/// scalar succession with a certain logic. It's expected to produce a series
/// of values that progressively get closer to the real root.
abstract base class NonLinear {
  /// The function f(x) for which the algorithm has to find a solution.
  final String function;

  /// The algorithm accuracy.
  final double tolerance;

  /// The maximum number of iterations to be made by the algorithm.
  final int maxSteps;

  /// Creates a new [NonLinear] object.
  const NonLinear({
    required this.function,
    required this.tolerance,
    required this.maxSteps,
  });

  @override
  String toString() => 'f(x) = $function';

  /// To get a meaningful result, it makes sense to compute the rate of
  /// convergence only if the algorithm made **at least** 3 [steps]
  /// (iterations).
  ///
  /// If [steps] is 2 or lower, [double.nan] is returned.
  double convergence(List<double> guesses, int steps) {
    final size = guesses.length - 1;

    if (size >= 3) {
      final numerator = (guesses[size] - guesses[size - 1]).abs() /
          (guesses[size - 1] - guesses[size - 2]).abs();
      final denominator = (guesses[size - 1] - guesses[size - 2]).abs() /
          (guesses[size - 2] - guesses[size - 3]).abs();

      return math.log(numerator) / math.log(denominator);
    }

    return double.nan;
  }

  /// The efficiency is evaluated only if the convergence is not [double.nan].
  /// The formula is:
  ///
  ///  - efficiency = convergenceRate <sup>1 / max_steps</sup>
  double efficiency(List<double> guesses, int steps) {
    final c = convergence(guesses, steps);

    return math.pow(c, 1.0 / steps) as double;
  }

  /// Evaluates the function on the given [x] value.
  num evaluateOn(double x) => const ExpressionParser().evaluateOn(function, x);

  /// Evaluates the derivative of the function on the given [x] value.
  num evaluateDerivativeOn(double x) {
    // Setting the precision to 1.0e-15
    final h = math.pow(1.0e-15, 1 / 3) * x;

    final upper = evaluateOn(x + h);
    final lower = evaluateOn(x - h);

    return (upper - lower) / (h * 2);
  }

  /// Generates the succession generated by the root-finding algorithm. Returns
  /// a [Record] object whose members are:
  ///
  ///  - a `guesses` named field, which contains the list of values generated by
  ///    the algorithm on each step;
  ///
  ///  - a `convergence` named field, whose value represents the convergence
  ///    rate for the generated succession (computed using [convergence]).
  ///
  ///  - a `efficiency` named field, whose value represents the efficiency of
  ///    the algorithm (computed using [efficiency]).
  ({List<double> guesses, double convergence, double efficiency}) solve();
}
