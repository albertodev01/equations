import 'package:equations/equations.dart';
import 'package:equations_solver/blocs/nonlinear_solver/nonlinear_solver.dart';
import 'package:equations_solver/blocs/system_solver/system_solver.dart';
import 'package:equations_solver/main.dart';
import 'package:equations_solver/routes/home_page.dart';
import 'package:equations_solver/routes/nonlinear_page/nonlinear_body.dart';
import 'package:equations_solver/routes/polynomial_page/polynomial_body.dart';
import 'package:equations_solver/routes/polynomial_page/polynomial_results.dart';
import 'package:equations_solver/routes/system_page/system_body.dart';
import 'package:equations_solver/routes/utils/collapsible/collapsible.dart';
import 'package:equations_solver/routes/utils/no_results.dart';
import 'package:equations_solver/routes/utils/svg_images/types/sections_logos.dart';
import 'package:equations_solver/routes/utils/svg_images/types/vectorial_images.dart';
import 'package:flutter/cupertino.dart';
import 'package:test/test.dart';

// ignore_for_file: prefer_const_constructors

/// The coverage report generated by `flutter test --coverage` doesn't take into
/// account those lines where a `const` constructor has a call to `super`. This
/// is something expected by the VM so very likely this behavior won't change.
///
/// In order to achieve 100% code coverage, this file calls some constructors
/// containing `super` calls **WITHOUT** the `const` keyword. In this way, the
/// coverage report tool can mark as "covered" even constructors with `super`
/// calls.
void main() {
  group('Testing constructors of the classes', () {
    test('Bloc events and states', () {
      expect(
        RowReductionMethod(
          matrix: const [],
          knownValues: const [],
          size: 1,
        ),
        isA<RowReductionMethod>(),
      );
      expect(
        FactorizationMethod(
          matrix: const [],
          knownValues: const [],
          size: 1,
        ),
        isA<FactorizationMethod>(),
      );
      expect(
        IterativeMethod(
          matrix: const [],
          knownValues: const [],
          size: 1,
        ),
        isA<IterativeMethod>(),
      );
      expect(
        SystemGuesses(
          systemSolver: LUSolver.flatMatrix(
            equations: const [],
            constants: const [],
          ),
          solution: const [],
        ),
        isA<SystemGuesses>(),
      );
      expect(
        SystemError(),
        isA<SystemError>(),
      );
      expect(
        SystemNone(),
        isA<SystemNone>(),
      );
      expect(
        SystemClean(),
        isA<SystemClean>(),
      );
      expect(
        SingularSystemError(),
        isA<SingularSystemError>(),
      );
      expect(
        NonlinearBody(),
        isA<NonlinearBody>(),
      );
      expect(
        PolynomialBody(),
        isA<PolynomialBody>(),
      );
      expect(
        SystemBody(),
        isA<SystemBody>(),
      );
      expect(
        PolynomialDiscriminant(),
        isA<PolynomialDiscriminant>(),
      );
      expect(
        PolynomialDiscriminant(),
        isA<PolynomialDiscriminant>(),
      );
      expect(
        NonlinearClean(),
        isA<NonlinearClean>(),
      );
      expect(
        BracketingMethod(
          function: 'x',
          upperBound: '1',
          lowerBound: '2',
          method: BracketingMethods.bisection,
        ),
        isA<BracketingMethod>(),
      );
      expect(
        SinglePointMethod(
          function: 'x',
          initialGuess: '1',
          method: SinglePointMethods.newton,
        ),
        isA<SinglePointMethod>(),
      );
    });

    test('Widgets constructors', () {
      expect(
        EquationsApp(),
        isA<EquationsApp>(),
      );
      expect(
        NoResults(),
        isA<NoResults>(),
      );
      expect(
        HomePage(),
        isA<HomePage>(),
      );
      expect(
        PolynomialLogo(),
        isA<PolynomialLogo>(),
      );
      expect(
        NonlinearLogo(),
        isA<NonlinearLogo>(),
      );
      expect(
        SystemsLogo(),
        isA<SystemsLogo>(),
      );
      expect(
        IntegralLogo(),
        isA<IntegralLogo>(),
      );
      expect(
        OtherLogo(),
        isA<OtherLogo>(),
      );
      expect(
        ArrowUpSvg(),
        isA<ArrowUpSvg>(),
      );
      expect(
        OtherComplexNumbers(),
        isA<OtherComplexNumbers>(),
      );
      expect(
        OtherMatrix(),
        isA<OtherMatrix>(),
      );
      expect(
        SquareMatrix(),
        isA<SquareMatrix>(),
      );
      expect(
        SquareRoot(),
        isA<SquareRoot>(),
      );
      expect(
        HalfRightAngle(),
        isA<HalfRightAngle>(),
      );
      expect(
        Atoms(),
        isA<Atoms>(),
      );
      expect(
        PlotIcon(),
        isA<PlotIcon>(),
      );
      expect(
        EquationSolution(),
        isA<EquationSolution>(),
      );
      expect(
        Collapsible(
          content: const SizedBox.shrink(),
          header: const Text(''),
        ),
        isA<Collapsible>(),
      );
    });
  });
}
